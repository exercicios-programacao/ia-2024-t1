Leonardo Pinto Machado - 202211746
Cleber Júnior Garcia de Lima - 202213280
Ismael Freitas - 


Busca em Profundidade (DFS)
def dfs(graph, start: int, goal: int) -> (int, float, [int]):
    """Busca em graph, um caminho entre start e goal usando busca em profundidade."""
    def dfs_recursive(v, visitados):
        nonlocal nodes_explored
        visitados.add(v)
        nodes_explored += 1
        if v == goal:
            return True
        for neighbor in graph[v]:
            if neighbor not in visitados:
                caminho.append(neighbor)
                if dfs_recursive(neighbor, visitados):
                    return True
                caminho.pop()
        return False

    nodes_explored = 0
    visitados = set()
    caminho = [start]
    if dfs_recursive(start, visitados):
        caminho_custo = sum(graph[caminho[i]][caminho[i + 1]] for i in range(len(caminho) - 1))
        return nodes_explored, caminho_custo, caminho
    else:
        return nodes_explored, float('inf'), []





Busca em Largura (BFS)
def bfs(graph, start: int, goal: int) -> (int, float, [int]):
    """Busca em graph, um caminho entre start e goal usando busca em largura."""
    from collections import deque

    nodes_explored = 0
    visitados = set()
    fila = deque([(start, [start])])

    while fila:
        v, caminho = fila.popleft()
        nodes_explored += 1
        if v == goal:
            caminho_custo = sum(graph[caminho[i]][caminho[i + 1]] for i in range(len(caminho) - 1))
            return nodes_explored, caminho_custo, caminho
        for neighbor in graph[v]:
            if neighbor not in visitados:
                visitados.add(neighbor)
                fila.append((neighbor, caminho + [neighbor]))
    
    return nodes_explored, float('inf'), []





Branch and Bound
def branch_and_bound(graph, start: int, goal: int) -> (int, float, [int]):
    """Busca em graph, um caminho entre start e goal usando Branch and Bound."""
    def copy_to_final(curr_path):
        nonlocal caminho_final
        caminho_final = curr_path[:] + [curr_path[0]]

    def first_min(i):
        min_val = sys.maxsize
        for k in graph[i]:
            if graph[i][k] < min_val:
                min_val = graph[i][k]
        return min_val

    def second_min(i):
        first, second = sys.maxsize, sys.maxsize
        for j in graph[i]:
            if graph[i][j] <= first:
                second = first
                first = graph[i][j]
            elif graph[i][j] <= second and graph[i][j] != first:
                second = graph[i][j]
        return second

    def tsp_rec(curr_bound, curr_weight, level, curr_path, visited):
        nonlocal final_res, nodes_explored
        if level == len(graph):
            if graph[curr_path[level - 1]].get(curr_path[0], 0) != 0:
                curr_res = curr_weight + graph[curr_path[level - 1]][curr_path[0]]
                if curr_res < final_res:
                    copy_to_final(curr_path)
                    final_res = curr_res
            return

        for i in graph[curr_path[level - 1]]:
            if not visited[i]:
                temp = curr_bound
                curr_weight += graph[curr_path[level - 1]][i]

                if level == 1:
                    curr_bound -= (first_min(curr_path[level - 1]) + first_min(i)) / 2
                else:
                    curr_bound -= (second_min(curr_path[level - 1]) + first_min(i)) / 2

                if curr_bound + curr_weight < final_res:
                    curr_path[level] = i
                    visited[i] = True
                    nodes_explored += 1

                    tsp_rec(curr_bound, curr_weight, level + 1, curr_path, visited)

                curr_weight -= graph[curr_path[level - 1]][i]
                curr_bound = temp

                visited = [False] * len(visited)
                for j in range(level):
                    if curr_path[j] != -1:
                        visited[curr_path[j]] = True

    nodes_explored = 0
    caminho_final = []
    final_res = sys.maxsize
    curr_bound = 0
    curr_path = [-1] * (len(graph) + 1)
    visited = [False] * len(graph)
    visited[start] = True
    curr_path[0] = start

    for i in range(len(graph)):
        curr_bound += (first_min(i) + second_min(i))

    curr_bound = int(curr_bound / 2)

    tsp_rec(curr_bound, 0, 1, curr_path, visited)

    if caminho_final:
        caminho_final.pop()  # Remover o nó inicial adicionado no final
        caminho_custo = sum(graph[caminho_final[i]][caminho_final[i + 1]] for i in range(len(caminho_final) - 1))
        return nodes_explored, caminho_custo, caminho_final
    else:
        return nodes_explored, float('inf'), []





A* (A Estrela)
def a_star(graph, start: int, goal: int) -> (int, float, [int]):
    def heuristica(no):
        return 0

    nodes_explored = 0
    open_list = []
    heapq.heappush(open_list, (0, start))
    came_from = {}
    g_score = {no: float('inf') for no in graph}
    g_score[start] = 0
    f_score = {no: float('inf') for no in graph}
    f_score[start] = heuristica(start)

    while open_list:
        _, current = heapq.heappop(open_list)
        nodes_explored += 1

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path = path[::-1]
            path_cost = sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))
            return nodes_explored, path_cost, path

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + graph[current][neighbor]
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristica(neighbor)
                heapq.heappush(open_list, (f_score[neighbor], neighbor))

    return nodes_explored, float('inf'), []





Dijkstra
def dijkstra(graph, start: int, goal: int) -> (int, float, [int]):
    nodes_explored = 0
    distancias = {no: float('inf') for no in graph}
    distancias[start] = 0
    prioridade = [(0, start)]
    caminho = {}

    while prioridade:
        distancia_atual, no_atual = heapq.heappop(prioridade)
        nodes_explored += 1

        if no_atual == goal:
            caminho_invertido = []
            while no_atual in caminho:
                caminho_invertido.append(no_atual)
                no_atual = caminho[no_atual]
            caminho_invertido.append(start)
            caminho_invertido = caminho_invertido[::-1]
            caminho_custo = sum(graph[caminho_invertido[i]][caminho_invertido[i + 1]] for i in range(len(caminho_invertido) - 1))
            return nodes_explored, caminho_custo, caminho_invertido

        for vizinho, peso in graph[no_atual].items():
            distancia = distancia_atual + peso

            if distancia < distancias[vizinho]:
                distancias[vizinho] = distancia
                caminho[vizinho] = no_atual
                heapq.heappush(prioridade, (distancia, vizinho))

    return nodes_explored, float('inf'), []






Ler Grafo
def read_graph(filename: str) -> (dict, dict):
    """Lê a estrutura do grafo a partir de um arquivo."""
    with open(filename, 'r') as file:
        # Ler número de nós
        num_nos = int(file.readline().strip())
        
        # Ler nós com suas coordenadas
        coordenadas = {}
        for _ in range(num_nos):
            linha = file.readline().strip().split()
            no, lat, lon = int(linha[0]), float(linha[1]), float(linha[2])
            coordenadas[no] = (lat, lon)
        
        # Ler número de arestas
        num_arestas = int(file.readline().strip())
        
        # Ler arestas com seus custos
        grafo = {no: [] for no in coordenadas}
        for _ in range(num_arestas):
            linha = file.readline().strip().split()
            origem, destino, custo = int(linha[0]), int(linha[1]), float(linha[2])
            grafo[origem].append((destino, custo))
            grafo[destino].append((origem, custo))  # Se o grafo for não-direcionado
        
    return grafo, coordenadas
